from collections import defaultdict
from random import randint
from typing import Annotated

import typer
from sqlalchemy import create_engine, insert, select, update, delete
from sqlalchemy.orm import Session

from app.core.config import settings
from app.db.models import Driver, Vehicle, VehicleModel, DriverVehicle

engine = create_engine(settings.DATABASE_URL)

app = typer.Typer()


@app.command()
def clear_db():
    """
    Clears database from autogenerated entites.
    """
    with Session(engine) as session:
        session.execute(delete(Vehicle).where(Vehicle.description == "Auto-generated"))
        session.execute(delete(Driver).where(Driver.first_name.startswith("auto generated")))
        session.commit()


@app.command()
def create_vehicle(
    enterprise_id: Annotated[
        list[int],
        typer.Option(
            help=(
                "Input enterprise id. For list of ids input a sequence of expression like "
                "'--enterprise-id 1 --enterprise-id 2 --enterprise-id 3."
            ),
        ),
    ],
    vehicle_num: Annotated[int, typer.Option(help=("Define how many vehicles should be generated."))] = 0,
):
    """
    Creates autogenerated Vehile, Driver and DriverVehicle entites.
    """
    enterprise_id = list(set(enterprise_id))
    with Session(engine) as session:
        models = session.execute(select(VehicleModel)).scalars().all()
        model_ids = [model.id for model in models]

        bulk_vehicle_list = []
        bulk_drivers_list = []
        enterprise_vehicle_dict = defaultdict(int)
        for i in range(vehicle_num):
            actual_enterprise_id = enterprise_id[randint(0, len(enterprise_id) - 1)]
            vehicle_data = {
                "description": "Auto-generated",
                "cost": randint(1000, 9999999),
                "manufactured_year": randint(2000, 2024),
                "mileage": randint(0, 500000),
                "brandmodel_id": model_ids[randint(0, len(model_ids) - 1)],
                "enterprise_id": actual_enterprise_id,
            }
            bulk_vehicle_list.append(vehicle_data)
            enterprise_vehicle_dict[actual_enterprise_id] += 1

            driver_data = {
                "first_name": f"auto generated {actual_enterprise_id} {i}",
                "last_name": f"auto generated {actual_enterprise_id} {i}",
                "salary": randint(10000, 300000),
            }
            bulk_drivers_list.append(driver_data)

        stmt = insert(Vehicle).values(bulk_vehicle_list).returning(Vehicle)

        result = session.execute(stmt)
        session.commit()
        created_vehicles = result.scalars().all()

        stmt = insert(Driver).values(bulk_drivers_list).returning(Driver)

        result = session.execute(stmt)
        session.commit()
        created_drivers = result.scalars().all()

        vehicle_driver_bulk_list = []
        driver_bulk_update_list = []
        for ind, driver_vehicle in enumerate(zip(created_drivers, created_vehicles)):
            driver, vehicle = driver_vehicle
            vehicle_driver_data = {
                "is_active_driver": (ind + 1) % 10 == 1,
                "driver_id": driver.id,
                "vehicle_id": vehicle.id,
            }
            vehicle_driver_bulk_list.append(vehicle_driver_data)

            driver_data = {
                "id": driver.id,
                "enterprise_id": vehicle.enterprise_id,
            }
            driver_bulk_update_list.append(driver_data)

        stmt = update(Driver)
        result = session.execute(stmt, driver_bulk_update_list)
        session.commit()

        stmt = insert(DriverVehicle).values(vehicle_driver_bulk_list).returning(DriverVehicle)
        result = session.execute(stmt)
        session.commit()


if __name__ == "__main__":
    app()
